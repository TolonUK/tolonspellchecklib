# -*- Makefile -*- for TolonSpellCheckLib
#
# NMAKE -f Makefile.msvc DLL=1
#
#ENCHANT_MAJOR_VERSION=0
#ENCHANT_MINOR_VERSION=0
#ENCHANT_MICRO_VERSION=0
#BUILDNUMBER=0
#ENCHANT_VERSION="$(ENCHANT_MAJOR_VERSION).$(ENCHANT_MINOR_VERSION).$(ENCHANT_MICRO_VERSION)"

#### Start of system configuration section. ####

# Flags that can be set on the nmake command line:
#   DLL=1     for compiling a .dll with a stub .lib (default is a static .lib)
#             Note that this works only with MFLAGS=-MD.
#   MFLAGS={-ML|-MT|-MD} for defining the compilation model
#     MFLAGS=-ML (the default)  Single-threaded, statically linked - libc.lib
#     MFLAGS=-MT                Multi-threaded, statically linked  - libcmt.lib
#     MFLAGS=-MD                Multi-threaded, dynamically linked - msvcrt.lib
#   DEBUG=1   for compiling with debugging information
#   PREFIX=Some\Directory       Base directory for installation
#   IIPREFIX=Some\\Directory    Same thing with doubled backslashes
#   GLIBDIR=Some\Directory      Path to glib include directory
#   MANIFEST=0                  Disables embedding of manifest
!if !defined(DLL)
DLL=0
!endif
!if !defined(DEBUG)
DEBUG=0
!endif
!if !defined(MFLAGS)
!if !$(DLL)
MFLAGS= 
!else
!if !$(DEBUG)
MFLAGS=-MD
!else
MFLAGS=-MDd
!endif
!endif
!endif
!if !defined(PREFIX)
PREFIX = c:\usr
!endif
!if !defined(IIPREFIX)
IIPREFIX = c:\\usr
!endif

!if !defined(MANIFEST)
MANIFEST=1
!endif

# Directories used by "make":
glibdir = $(GLIBDIR)
rootdir = .
topsrcdir = $(rootdir)\src
includedir = $(rootdir)\include
testdir = $(rootdir)\test
bindir=$(rootdir)\bin
!if $(DEBUG)
outdir=$(rootdir)\bin\debug
!else
outdir=$(rootdir)\bin\release
!endif
objdir=$(outdir)\obj
pdbdir=$(outdir)\pdb
libdir=$(outdir)

# Directories used by "make install":
prefix = $(PREFIX)
exec_prefix = $(prefix)
#bindir = $(exec_prefix)\bin
otherlibdir = $(exec_prefix)\lib
!if defined(STL_LIB_PATH)
stllibdir = $(STL_LIB_PATH)
!else
stllibdir = .
!endif
otherincludedir = $(exec_prefix)\include
!if defined(STL_INCLUDE_PATH)
stlincludedir = $(STL_INCLUDE_PATH)
!endif
!if defined(BOOST_INCLUDE_PATH)
boostincludedir = $(BOOST_INCLUDE_PATH)
!endif
#datadir = $(prefix)\share
#localedir = $(datadir)\locale
#aliaspath =
#IIprefix = $(IIPREFIX)
#IIexec_prefix = $(IIprefix)
#IIbindir = $(IIexec_prefix)\\bin
#IIlibdir = $(IIexec_prefix)\\lib
#IIincludedir = $(IIprefix)\\include
#IIdatadir = $(IIprefix)\\share
#IIlocaledir = $(IIdatadir)\\locale
#IIaliaspath =

# Programs used by "make":

CC = cl
LINK = link
MT = mt

# Set to -W3 if you want to see maximum amount of warnings, including stupid
# ones. Set to -W1 to avoid warnings about signed/unsigned combinations.
WARN_CFLAGS = -W1

!if $(DEBUG)
OPTIMFLAGS = -Od -Zi
!else
# Some people prefer -O2 -G6 instead of -O1, but -O2 is not reliable in MSVC5.
OPTIMFLAGS = -DNDEBUG -D_NDEBUG -O1 -Zi
!endif

OUTPUTFLAGS = \
    -Fo"$(objdir)\\" 

WINFLAGS = \
    -D_X86_ \
    -DWINDOWS \
    -D_WINDOWS \
    -DWIN32 \
    -D_WIN32 \
    -DUNICODE \
    -D_UNICODE

DEBUGFLAGS = -Zi

EXCEPTIONFLAGS = -EHsc

CFLAGS = \
    $(MFLAGS) \
    $(WARN_CFLAGS) \
    $(EXCEPTIONFLAGS) \
    $(OPTIMFLAGS) \
    $(WINFLAGS) \
    $(OUTPUTFLAGS)

INCLUDES = \
    -I. \
    -I$(topsrcdir) \
    -I$(rootdir) \
    -I$(includedir) \
    -I$(otherincludedir) \
    -I$(glibdir) \
    -I$(glibdir)\\glib
    
!if defined (stlincludedir)
INCLUDES = $(INCLUDES) \
    -I$(stlincludedir)
!endif

!if defined (boostincludedir)
INCLUDES = $(INCLUDES) \
    -I$(boostincludedir)
!endif

LINKFLAGS = \
    -INCREMENTAL:NO \
    -MANIFEST \
    -MANIFESTUAC:"level='asInvoker' uiAccess='false'" \
    -PDB:$(pdbdir)\\ \
    -MACHINE:X86 \
    -OPT:REF \
    -OPT:ICF \
    -DEBUG \
    -LIBPATH:$(stllibdir)

AR = lib
AR_FLAGS = /out:

LN = copy
RM = -del

# Programs used by "make install":
INSTALL = copy
INSTALL_PROGRAM = copy
INSTALL_DATA = copy

#### End of system configuration section. ####

SHELL = /bin/sh

CC_OBJ = $(CC) $(INCLUDES) $(CFLAGS) -c 

#CC_LINK = $(CC) $(CFLAGS) $(LINKFLAGS) 
CC_LINK = $(LINK) $(LINKFLAGS) 
LINK_EXE = $(CC_LINK) /SUBSYSTEM:CONSOLE
LINK_DLL = $(CC_LINK) /DLL /SUBSYSTEM:WINDOWS

!if $(MANIFEST)
EMBED_MANIFEST = $(MT) /manifest $(outdir)\exe_name.manifest /outputresource:"$(outdir)\exe_name;1"
CLEAN_MANIFEST = $(RM) $(outdir)\exe_name.manifest
!else
EMBED_MANIFEST = 
CLEAN_MANIFEST =
!endif

all: makedirs libtolonspellcheck test-tolonspellcheck

makedirs: force
    -mkdir $(bindir)
    -mkdir $(outdir)
    -mkdir $(libdir)
    -mkdir $(objdir)
    -mkdir $(pdbdir)

################################################################################
#### LIBTOLONSPELLCHECK ####

srcdir = $(topsrcdir)

LIBTOLONSPELLCHECK_DEFINES = \
    -DWINDLL

LIBTOLONSPELLCHECK_DLL=$(outdir)\libtolonspellcheck.dll
LIBTOLONSPELLCHECK_LIB=$(outdir)\libtolonspellcheck.lib
LIBTOLONSPELLCHECK_PDB=$(pdbdir)\libtolonspellcheck.pdb
LIBTOLONSPELLCHECK_RES=$(srcdir)\libtolonspellcheck.res
LIBTOLONSPELLCHECK_RC=$(srcdir)\libtolonspellcheck.rc
LIBTOLONSPELLCHECK_DEF=$(srcdir)\libtolonspellcheck.def

LIBTOLONSPELLCHECK_LIBS = \
    $(otherlibdir)\glib-2.0.lib \
    $(otherlibdir)\libenchant.lib \
    Advapi32.lib \
    comctl32.lib \
    user32.lib

LIBTOLONSPELLCHECK_OBJECTS = \
    $(objdir)\tscDLL.obj \
    $(objdir)\tscModule.obj \
    $(objdir)\tscSession.obj \
    $(objdir)\CheckSpellingDlg.obj \
    $(objdir)\LanguageDlg.obj \
    $(objdir)\SpellingOptionsDlg.obj \
    $(objdir)\RichEditSpellChecker.obj \
    $(objdir)\utf8conv.obj \
    $(objdir)\isoLang.obj \
    $(objdir)\TolonSpellCheckInternals.obj

$(objdir)\tscDLL.obj : $(srcdir)\tscDLL.cpp
    $(CC_OBJ) $** $(LIBTOLONSPELLCHECK_DEFINES)

$(objdir)\tscModule.obj : $(srcdir)\tscModule.cpp
    $(CC_OBJ) $** $(LIBTOLONSPELLCHECK_DEFINES)

$(objdir)\tscSession.obj : $(srcdir)\tscSession.cpp
    $(CC_OBJ) $** $(LIBTOLONSPELLCHECK_DEFINES)
    
$(objdir)\CheckSpellingDlg.obj : $(srcdir)\CheckSpellingDlg.cpp
    $(CC_OBJ) $** $(LIBTOLONSPELLCHECK_DEFINES)

$(objdir)\LanguageDlg.obj : $(srcdir)\LanguageDlg.cpp
    $(CC_OBJ) $** $(LIBTOLONSPELLCHECK_DEFINES)
    
$(objdir)\SpellingOptionsDlg.obj : $(srcdir)\SpellingOptionsDlg.cpp
    $(CC_OBJ) $** $(LIBTOLONSPELLCHECK_DEFINES)

$(objdir)\RichEditSpellChecker.obj : $(srcdir)\RichEditSpellChecker.cpp
    $(CC_OBJ) $** $(LIBTOLONSPELLCHECK_DEFINES)
    
$(objdir)\utf8conv.obj : $(srcdir)\utf8conv.cpp
    $(CC_OBJ) $** $(LIBTOLONSPELLCHECK_DEFINES)
    
$(objdir)\isoLang.obj : $(srcdir)\isoLang.cpp
    $(CC_OBJ) $** $(LIBTOLONSPELLCHECK_DEFINES)
    
$(objdir)\TolonSpellCheckInternals.obj : $(srcdir)\TolonSpellCheckInternals.cpp
    $(CC_OBJ) $** $(LIBTOLONSPELLCHECK_DEFINES)
    
$(LIBTOLONSPELLCHECK_RES) : $(LIBTOLONSPELLCHECK_RC)
    rc -Fo $(LIBTOLONSPELLCHECK_RES) $(LIBTOLONSPELLCHECK_RC)
    
#$(LIBTOLONSPELLCHECK_RC) : $(LIBTOLONSPELLCHECK_RC).in
#    sed \
#        -e 's/@ENCHANT_MAJOR_VERSION@/$(ENCHANT_MAJOR_VERSION)/g' \
#        -e 's/@ENCHANT_MINOR_VERSION@/$(ENCHANT_MINOR_VERSION)/g' \
#        -e 's/@ENCHANT_MICRO_VERSION@/$(ENCHANT_MICRO_VERSION)/g' \
#        -e 's/BUILDNUMBER/$(BUILDNUMBER)/g' $(LIBENCHANT_RC).in > $(LIBENCHANT_RC)

!if !$(DLL)
libtolonspellcheck: LIBTOLONSPELLCHECK_LIB
libtolonspellcheck_clean: libtolonspellcheck_lib_clean
!else
libtolonspellcheck: LIBTOLONSPELLCHECK_DLL
libtolonspellcheck_clean: libtolonspellcheck_dll_clean
!endif

LIBTOLONSPELLCHECK_LIB : $(LIBTOLONSPELLCHECK_OBJECTS)
    -$(RM) $(LIBTOLONSPELLCHECK_LIB)
    $(AR) $(AR_FLAGS)$(LIBTOLONSPELLCHECK_LIB) $(LIBTOLONSPELLCHECK_OBJECTS)

# libtolonspellcheck.dll and libtolonspellcheck.lib are created together.
LIBTOLONSPELLCHECK_DLL : $(LIBTOLONSPELLCHECK_OBJECTS) $(LIBTOLONSPELLCHECK_RES)
    $(LINK_DLL) -DEF:$(LIBTOLONSPELLCHECK_DEF) $(LIBTOLONSPELLCHECK_OBJECTS) $(LIBTOLONSPELLCHECK_LIBS) $(LIBTOLONSPELLCHECK_RES) -OUT:$(LIBTOLONSPELLCHECK_DLL)
    $(EMBED_MANIFEST:exe_name=libtolonspellcheck.dll)
    $(CLEAN_MANIFEST:exe_name=libtolonspellcheck.dll)

libtolonspellcheck_lib_clean:
    $(RM) $(LIBTOLONSPELLCHECK_OBJECTS) $(LIBTOLONSPELLCHECK_LIB)

libtolonspellcheck_dll_clean:
    $(RM) $(LIBTOLONSPELLCHECK_OBJECTS) $(LIBTOLONSPELLCHECK_LIB) $(LIBTOLONSPELLCHECK_DLL) $(LIBTOLONSPELLCHECK_PDB) $(LIBTOLONSPELLCHECK_RES)
    
################################################################################
#### TEST-TOLONSPELLCHECK ####

srcdir = $(toptestdir)

TEST_TOLONSPELLCHECK_EXE=$(outdir)\tsc-test.exe
TEST_TOLONSPELLCHECK_PDB=$(pdbdir)\tsc-test.pdb

TEST_TOLONSPELLCHECK_DEFINES = \
    -D_CONSOLE
    
TEST_TOLONSPELLCHECK_LIBS = \
    $(libdir)\libtolonspellcheck.lib \
    comctl32.lib

TEST_TOLONSPELLCHECK_OBJECTS = \
    $(objdir)\tscTest.obj

$(objdir)\tscTest.obj : $(testdir)\tscTest.cpp
    $(CC_OBJ) $** $(TEST_TOLONSPELLCHECK_DEFINES)

test-tolonspellcheck: $(TEST_TOLONSPELLCHECK_EXE) 

$(TEST_TOLONSPELLCHECK_EXE): $(TEST_TOLONSPELLCHECK_OBJECTS)
    $(LINK_EXE) $(TEST_TOLONSPELLCHECK_OBJECTS) $(TEST_TOLONSPELLCHECK_LIBS) -OUT:$(TEST_TOLONSPELLCHECK_EXE)
    $(EMBED_MANIFEST:exe_name=tsc-test.exe)
    $(CLEAN_MANIFEST:exe_name=tsc-test.exe)
    
test-tolonspellcheck_clean:
    $(RM) $(TEST_TOLONSPELLCHECK_OBJECTS) $(TEST_TOLONSPELLCHECK_EXE) $(TEST_TOLONSPELLCHECK_PDB)

################################################################################

check : all

install : force
    -mkdir $(prefix)
    -mkdir $(prefix)\include
    $(INSTALL_DATA) $(includedir)\TolonSpellCheck.h $(prefix)\include\TolonSpellCheck.h
    -mkdir $(prefix)\bin
    $(INSTALL_DATA) $(outdir)\tsc-test.exe $(prefix)\bin\tsc-test.exe
#!if $(MANIFEST)
#        $(INSTALL_DATA) $(outdir)\tsc-test.exe.manifest $(prefix)\bin\tsc-test.exe.manifest
#!endif
!if $(DLL)
    $(INSTALL_DATA) $(outdir)\libtolonspellcheck.dll $(prefix)\bin\libtolonspellcheck.dll
#!if $(MANIFEST)
#        $(INSTALL_DATA) $(outdir)\libtolonspellcheck.dll.manifest $(prefix)\bin\libtolonspellcheck.dll.manifest
#!endif
!endif
    -mkdir $(prefix)\lib
    $(INSTALL_DATA) $(outdir)\libtolonspellcheck.lib $(prefix)\lib\libtolonspellcheck.lib

mostlyclean : clean

clean: libtolonspellcheck_clean test-tolonspellcheck_clean

distclean : clean

maintainer-clean : distclean

force :

